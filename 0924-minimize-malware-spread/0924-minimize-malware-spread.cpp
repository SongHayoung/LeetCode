class Solution {
    vector<vector<int>> adj;
    int n;
    int bfs(int skip, vector<int>& A) {
        vector<int> vis(n);
        queue<int> q;
        int res = 0;
        auto push = [&](int x) {
            if(!vis[x]) {
                vis[x] = true;
                q.push(x);
                res++;
            }
        };
        for(auto& x : A) if(skip != x) push(x);
        while(q.size()) {
             auto u = q.front(); q.pop();
            for(auto& v : adj[u]) push(v);
        }
        return res;
    }
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& A) {
        n = graph.size();
        adj = vector<vector<int>> (n);
        for(int i = 0; i < n; i++) for(int j = i + 1; j < n; j++) {
            if(graph[i][j]){
                adj[i].push_back(j);
                adj[j].push_back(i);
            }
        }
        int cost = INT_MAX, res = 0;
        sort(begin(A), end(A));
        for(auto& x : A) {
            int c = bfs(x,A);
            if(c < cost) {
                cost = c;
                res = x;
            }
        }
        return res;
    }
};